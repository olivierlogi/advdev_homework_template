// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/w054-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    def GUID = "w054"
    def CLUSTER = "na39.openshift.opentlc.com"
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    
    echo "MLBPark"
    sh 'pwd; ls'
    def mvnCmd = "mvn -s ./nexus_settings.xml"

    stage('Checkout Source Code') {
      echo "Checking out source code..."
      git 'https://github.com/olivierlogi/advdev_homework_template.git'
    }

    def groupId = getGroupIdFromPom("./MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("./MLBParks/pom.xml")
    def version = getVersionFromPom("./MLBParks/pom.xml")

    def devTag = "${version}-${BUILD_NUMBER}"
    def prodTag = "${version}"

    stage('Build Java War') {
      echo "Building java war version ${devTag}..."
      sh "${mvnCmd} -f ./MLBParks/pom.xml -DskipTests clean package"
    }
 
    stage('Run Unit Tests') {
      echo "Running unit tests..."
      sh "${mvnCmd} -f ./MLBParks/pom.xml test"
    }
    stage('Sonarqube Code Analysis') {
      echo "Analyzing code use sonarqube..."
      sh "${mvnCmd} -f ./MLBParks/pom.xml sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    }

    stage('Publish WAR Artifact To Nexus') {
      echo "Publishing artifact to nexus..."
      sh "${mvnCmd} -f ./MLBParks/pom.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
    }
    
    stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image tasks:${devTag}..."
      sh "oc start-build mlbparks --follow --from-file=http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases/com/openshift/evg/roadshow/mlbparks/${version}/mlbparks-${version}.war -n ${GUID}-parks-dev"
      openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }


  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
