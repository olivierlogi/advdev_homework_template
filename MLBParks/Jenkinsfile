// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "2Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
 echo "MLBPark"
    sh 'pwd; ls'
    
    stage('Checkout Source Code') {
      echo "Checking out source code..."
      git 'https://github.com/olivierlogi/advdev_homework_template.git'
    }

    def mvnCmd = "mvn -s ./nexus_settings.xml"

    def groupId = getGroupIdFromPom("./MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("./MLBParks/pom.xml")
    def version = getVersionFromPom("./MLBParks/pom.xml")

    def devTag = "${version}-${BUILD_NUMBER}"
    def prodTag = "${version}"

    stage('Build War file') {
      echo "Building java war version"
      sh "${mvnCmd} -f ./MLBParks/pom.xml -DskipTests clean package"
    }

    stage('Unit Tests') {
    echo "MLBParks unit tests"
    sh "${mvnCmd} -f ./MLBParks/pom.xml test"
    }

    stage('Code Analysis') {
    echo "Start Code Analysis"
    sh "${mvnCmd} -f ./MLBParks/pom.xml sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    }

    stage('Publishing to repository') {
    echo "Publishing to nexus"
    sh "${mvnCmd} -f ./MLBParks/pom.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
    }

    stage('Build container image') {
    echo "Building container image MLBParks:0.0-0"
    sh "ls ./MLBParks/target/ | grep .war"
    sh "oc start-build mlbparks --follow --from-file=./MLBParks/target/mlbparks.war -n ${GUID}-parks-dev"
    openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }

    stage('Deploy In Development') {
    echo "Deploying container image to Development Project"
    sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"
    openshiftDeploy depCfg: 'mlbparks', namespace: "${GUID}-parks-dev", verbose: 'false', waitTime: '', waitUnit: 'sec'
    }

    stage('Run Integration Tests') {
      echo "Wait 60 seconds"
      sleep 60

      echo "Integration Tests"
      sh "curl http://mlbparks-${GUID}-parks-dev.apps.${CLUSTER}/ws/healthz/ | grep -q 'OK'"
      sh "curl http://mlbparks-${GUID}-parks-dev.apps.${CLUSTER}/ws/data/load/ | grep -q 'Items inserted in database: 30'"
    }

    stage('Copy Image') {
      echo "Copying image to Nexus Docker Registry"
      sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/mlbparks:${devTag} docker://nexus-registry-${GUID}-nexus.apps.${CLUSTER}/mlbparks:${devTag}"
      openshiftTag alias: 'false', destStream: 'mlbparks', destTag: prodTag, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: devTag, verbose: 'false'
    }

  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}